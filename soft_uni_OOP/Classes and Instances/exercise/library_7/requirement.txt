    7. Library
Create class called Library, where the information regarding the users and books rented/available will be stored. Create another one called User, where the information for each of the library users will be stored: user id, username and file with records of the books rented by the current user.
Class Library
Upon initialization you won't receive anything. The class should have the following attributes:
    • user_records - empty list which will store the users (users objects) of the library
    • books_available - empty dictionary which will keep information regarding the authors (key: str) and the books available for each of the authors (list of strings)
    • rented_books - empty dictionary with usernames for keys and another dictionary as value in which the book names will be the keys and days to return (number) the value ({usernames: {book names: days left}}).
You should also create 3 instance methods:
    • add_user(user: User):
        ◦ add the user if we do not have him/her in the library records already, otherwise return the message "User with id = {user_id} already registered in the library!"

    • remove_user(user: User):
        ◦ remove the user from the library records if available and his rented books (if any), otherwise return the message "We could not find such user to remove!"

    • change_username(user_id: int, new_username: str):
        ◦ change the username with the new provided and return the message "Username successfully changed to: {new_username} for userid: {user_id}" if there is a  record with the same user id in the library and the username is different than the provided one. Change his username in the rented_books dictionary as well (if present).
        ◦ If the username is the same for this id return the following message "Please check again the provided username - it should be different than the username used so far!".
        ◦ If there is no record for the provided id return "There is no user with id = {user_id}!"
Class User
Upon initialization it should receive user_id(int) and username(string). The class should also have an attribute books which will be an empty list at the beginning. You should also create 3 instance methods:
    • get_book(author: str, book_name: str, days_to_return: int, library: Library):
        ◦ if the book is available in the library add it to the books list for this user, update the library records (rented_books and available_books dicts) and return the following message: "{book_name} successfully rented for the next {days_to_return} days!"
        ◦ If the book is not available in the library, do nothing
        ◦ if it's already rented return the following message "The book "{book_name}" is already rented and will be available in {days_to_return provided by the user rented the book} days!"

    • return_book(author:str, book_name:str, library: Library):
        ◦ if the book is in the user's books list return it in the library (update books_available and rented_books class attributes) and remove it from the books list for this user
        ◦ otherwise return the following message "{username} doesn't have this book in his/her records!"

    • info() - return a string containing the books currently rented by the user in ascending order separated by comma and space.
    • You should also override the __string__ method in order to get a string in the following format "{user_id}, {username}, {books}"

Note: Please submit a zip file, containing a separate file for each of the classes, with the class names provided in the problem description and include them in project module in order to be able to make proper imports.
Test Code:
            from project.library import Library
            from project.user import User

            user = User(12, 'Peter')
            library = Library()
            library.add_user(user)
            print(library.add_user(user))
            library.remove_user(user)
            print(library.remove_user(user))
            library.add_user(user)
            print(library.change_username(2, 'Igor'))
            print(library.change_username(12, 'Peter'))
            print(library.change_username(12, 'George'))

            [print(f'{user_record.user_id}, {user_record.username}, {user_record.books}') for user_record in library.user_records]
            library.books_available.update({'J.K.Rowling': ['The Chamber of Secrets',
                                                            'The Prisoner of Azkaban',
                                                            'The Goblet of Fire',
                                                            'The Order of the Phoenix',
                                                            'The Half-Blood Prince',
                                                            'The Deathly Hallows']})


            user.get_book('J.K.Rowling', 'The Deathly Hallows', 17, library)
            print(library.books_available)
            print(library.rented_books)
            print(user.books)
            print(user.get_book('J.K.Rowling', 'The Deathly Hallows', 10, library))
            print(user.return_book('J.K.Rowling', 'The Cursed Child', library))
            user.return_book('J.K.Rowling', 'The Deathly Hallows', library)
            print(library.books_available)
            print(library.rented_books)
            print(user.books)
Output:
            User with id = 12 already registered in the library!
            We could not find such user to remove!
            There is no user with id = 2!
            Please check again the provided username - it should be different than the username used so far!
            Username successfully changed to: George for userid: 12
            12, George, []
            {'J.K.Rowling': ['The Chamber of Secrets', 'The Prisoner of Azkaban', 'The Goblet of Fire', 'The Order of the Phoenix', 'The Half-Blood Prince']}
            {'George': {'The Deathly Hallows': 17}}
            ['The Deathly Hallows']
            The book "The Deathly Hallows" is already rented and will be available in 17 days!
            George doesn't have this book in his/her records!
            {'J.K.Rowling': ['The Chamber of Secrets', 'The Prisoner of Azkaban', 'The Goblet of Fire', 'The Order of the Phoenix', 'The Half-Blood Prince', 'The Deathly Hallows']}
            {'George': {}}
            []
Test Code:
            from library import Library
            from user import User

            user = User(12, 'Peter')
            library = Library()
            library.add_user(user)

            library.books_available.update({'J.K.Rowling': ['The Chamber of Secrets',
                                                            'The Prisoner of Azkaban',
                                                            'The Goblet of Fire',
                                                            'The Order of the Phoenix',
                                                            'The Half-Blood Prince',
                                                            'The Deathly Hallows']})

            user.get_book('J.K.Rowling', 'The Deathly Hallows', 10, library)

            print(user)
Output:
            12, Peter, ['The Deathly Hallows']
