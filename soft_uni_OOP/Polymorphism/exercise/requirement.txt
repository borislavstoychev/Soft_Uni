                                                        Exercise: Polymorphism
Problems for exercise and homework for the Python OOP Course @SoftUni. Submit your solutions in the SoftUni judge system at https://judge.softuni.bg/Contests/1943
    1. Vehicle
Create an abstract class called Vehicle that should have abstract methods drive and refuel. Create 2 vehicles that inherit the Vehicle class (a Car and a Truck) and simulates driving and refueling them. Car and Truck both have fuel_quantity, fuel_consumption in liters per km and can be driven a given distance: drive(distance) and refueled with a given amount of fuel: refuel(fuel). It is summer, so both vehicles use air conditioners and their fuel consumption per km when driving is increased by 0.9 liters for the car and with 1.6 liters for the truck. Also, the Truck has a tiny hole in its tank and when it's refueled it keeps only 95% of the given fuel. The car has no problems and adds all the given fuel to its tank. If a vehicle cannot travel the given distance, its fuel does not change.
Note: Submit all your classes and imports in the judge system
                                                    Examples
Test Code:
            car = Car(20, 5)
            car.drive(3)
            print(car.fuel_quantity)
            car.refuel(10)
            print(car.fuel_quantity)

            truck = Truck(100, 15)
            truck.drive(5)
            print(truck.fuel_quantity)
            truck.refuel(50)
            print(truck.fuel_quantity)
Output:
            2.299999999999997
            12.299999999999997

            17.0
            64.5
    2. Groups
Create a class called Person. Upon initialization it will receive a name (str) and a surname (str). Create another class called Group. Upon initialization it should receive a name (str) and people (list of Person instances). Implement the needed magic methods, so the test code below works
                                                    Examples
Test Code:
            p0 = Person('Aliko', 'Dangote')
            p1 = Person('Bill', 'Gates')
            p2 = Person('Warren', 'Buffet')
            p3 = Person('Elon', 'Musk')
            p4 = p2 + p3

            first_group = Group('__VIP__', [p0, p1, p2])
            second_group = Group('Special', [p3, p4])
            third_group = first_group + second_group

            print(len(first_group))
            print(second_group)
            print(third_group[0])

            for person in third_group:
                print(person)
Output:
            3
            Group Special with members Elon Musk, Warren Musk
            Person 0: Aliko Dangote
            Person 0: Aliko Dangote
            Person 1: Bill Gates
            Person 2: Warren Buffet
            Person 3: Elon Musk
            Person 4: Warren Musk


    3. Account
Create a single class called Account. Upon initialization, it should receive owner (str) and amount (int, optional, 0 by default). It should also have an attribute called _transactions (empty list upon initialization). Create the following methods:
    • add_transaction(amount) - if the amount is not an integer, raise ValueError with message "please use int for amount", otherwise, add the amount to the transactions
    • balance() - property that returns sum of the amount and all the transactions
    • validate_transaction(account: Account, amount_to_add) - if the transaction is possible, add it. If the balance becomes less than zero, raise ValueError with message "sorry cannot go in debt!" and break the transaction. Otherwise, complete it and return a message "New balance: {account_ballance}"
Implement the correct magic methods, so the code in the example bellow works properly
                                            Examples
Test Code:

            acc = Account('bob', 10)
            acc2 = Account('john')
            print(acc)
            print(repr(acc))
            acc.add_transaction(20)
            acc.add_transaction(-20)
            acc.add_transaction(30)
            print(acc.balance)
            print(len(acc))
            for transaction in acc:
                print(transaction)
            print(acc[1])
            print(list(reversed(acc)))
            acc2.add_transaction(10)
            acc2.add_transaction(60)
            print(acc > acc2)
            print(acc >= acc2)
            print(acc < acc2)
            print(acc <= acc2)
            print(acc == acc2)
            print(acc != acc2)
            acc3 = acc + acc2
            print(acc3)
            print(acc3._transactions)
Output:
            Account of bob with starting amount: 10
            Account(bob, 10)
            40
            3
            20
            -20
            30
            -20
            [30, -20, 20]
            False
            False
            True
            True
            False
            True
            Account of bob&john with starting amount: 10
            [20, -20, 30, 10, 60]
